package trie_test

import (
	"bytes"
	"crypto/rand"
	"testing"

	"github.com/lukesolo/trie"
)

func ExampleLowestNumbers() {
	tree := trie.NewMerkleTrie()
	tree.Add(zero(), nil)
	tree.Add(one(), nil)

	tree.Print()

	// Output:
	
	
}

func TestIgnoreOrder(t *testing.T) {
	tree1 := trie.NewMerkleTrie()
	tree1.Add(zero(), []byte{0})
	tree1.Add(one(), []byte{1})
	hash1 := tree1.Hash()

	tree2 := trie.NewMerkleTrie()
	tree2.Add(one(), []byte{1})
	tree2.Add(zero(), []byte{0})
	hash2 := tree2.Hash()

	if !bytes.Equal(hash1, hash2) {
		t.Error("Different hashes for different orders")
	}
}

func Benchmark(b *testing.B) {
	tree := trie.NewMerkleTrie()

	for i := 0; i < b.N; i++ {
		key := make([]byte, 32)
		rand.Read(key)
		tree.Add(key, key)
	}
}

func zero() []byte {
	return make([]byte, 32, 32)
}

func one() []byte {
	one := make([]byte, 32, 32)
	one[31] = 1
	return one
}
